<Window x:Class="AngleInterpolation.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:view="clr-namespace:AngleInterpolation.View"
        xmlns:wpf="clr-namespace:SharpGL.WPF;assembly=SharpGL.WPF"
        xmlns:viewModel="clr-namespace:AngleInterpolation.ViewModel"
        xmlns:model="clr-namespace:AngleInterpolation.Model"
        Title="MainWindow" Height="350" Width="1333" WindowState="Maximized">
    <Window.Resources>
        <model:InterpolationTypeConverter x:Key="InterpolationTypeConverter"/>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="180"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Separator Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" Background="SlateGray" BorderThickness="2" HorizontalAlignment="Stretch"/>
        <Grid Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="2*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="2*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0" Orientation="Vertical">
                <TextBlock Text="Start Position"/>
                <view:PositionControl DataContext="{Binding StartAxis.Position}"/>
            </StackPanel>
            <StackPanel Grid.Column="1" Orientation="Vertical">
                        <TextBlock Text="Start Rotation"/>
                <StackPanel Orientation="Horizontal">
                    <view:PositionControl DataContext="{Binding StartAxis.Rotation}" Margin="0, 0, 50, 0"/>
                    <StackPanel Orientation="Vertical">
                        <view:PositionControl DataContext="{Binding StartAxis.QuaternionRotation}"/>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="W: "/>
                            <TextBox Text="{Binding StartAxis.QuaternionRotation.W}"/>
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </StackPanel>
            <StackPanel Grid.Column="2" Orientation="Vertical">
                <TextBlock Text="End Position"/>
                <view:PositionControl DataContext="{Binding EndAxis.Position}"/>
            </StackPanel>
            <StackPanel Grid.Column="3" Orientation="Vertical">
                <TextBlock Text="End Rotation"/>
                <StackPanel Orientation="Horizontal">
                    <view:PositionControl DataContext="{Binding EndAxis.Rotation}" Margin="0, 0, 50, 0"/>
                    <StackPanel Orientation="Vertical">
                        <view:PositionControl DataContext="{Binding EndAxis.QuaternionRotation}"/>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="W: "/>
                            <TextBox Text="{Binding EndAxis.QuaternionRotation.W}"/>
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </StackPanel>

            <StackPanel Grid.Column="4" Orientation="Vertical">
                <TextBlock Text="Quaternion interpolation:"/>
                <RadioButton Content="Linear" IsChecked="{Binding QuaternionAxis.InterpolationType, Converter={StaticResource InterpolationTypeConverter}, ConverterParameter={x:Static model:InterpolationType.Lerp}}"/>
                <RadioButton Content="Spherical" IsChecked="{Binding QuaternionAxis.InterpolationType, Converter={StaticResource InterpolationTypeConverter}, ConverterParameter={x:Static model:InterpolationType.Slerp}}"/>
            </StackPanel>

            <StackPanel Grid.Column="5" Orientation="Vertical">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Animation length (s): "/>
                    <TextBox Text="{Binding AnimationLength}" VerticalAlignment="Top"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Frame count: "/>
                    <TextBox Text="{Binding FrameCount}" VerticalAlignment="Top"/>
                </StackPanel>
                <Button Content="Show all frames" Command="{Binding ShowAllFramesCommand}"/>
            </StackPanel>

            <StackPanel Grid.Column="6" Orientation="Vertical">
                <Button Content="Start Animation" Command="{Binding StartAnimationCommand}"/>
                <Button Content="Reset Animation" Command="{Binding ResetAnimationCommand}"/>
                <Button Content="Reset Viewport" Command="{Binding ResetViewportCommand}"/>
                <Button Content="Recalculate Euler" Command="{Binding ShowAllFramesCommand}"/>
                <Button Content="Recalculate Quat" Command="{Binding ShowAllFramesCommand}"/>
            </StackPanel>
        </Grid>

        <wpf:OpenGLControl Grid.Column="0" Grid.Row="1" Margin="5" OpenGLDraw="QuaternionOpenGLControl_OnOpenGLDraw" OpenGLInitialized="OpenGLControl_OnOpenGLInitialized" RenderContextType="FBO" 
                           MouseDown="OpenGLControl_OnMouseDown" MouseMove="OpenGLControl_OnMouseMove" MouseUp="OpenGLControl_OnMouseUp" MouseWheel="OpenGLControl_OnMouseWheel"
                           viewModel:SizeObserver.Observe="True" viewModel:SizeObserver.ObservedWidth="{Binding ViewportWidth, Mode=OneWayToSource}" viewModel:SizeObserver.ObservedHeight="{Binding ViewportHeight, Mode=OneWayToSource}"/>

        <wpf:OpenGLControl Grid.Column="1" Grid.Row="1" Margin="5" OpenGLDraw="EulerOpenGLControl_OnOpenGLDraw" OpenGLInitialized="OpenGLControl_OnOpenGLInitialized" RenderContextType="FBO" 
                           MouseDown="OpenGLControl_OnMouseDown" MouseMove="OpenGLControl_OnMouseMove" MouseUp="OpenGLControl_OnMouseUp" MouseWheel="OpenGLControl_OnMouseWheel"
                           viewModel:SizeObserver.Observe="True" viewModel:SizeObserver.ObservedWidth="{Binding ViewportWidth, Mode=OneWayToSource}" viewModel:SizeObserver.ObservedHeight="{Binding ViewportHeight, Mode=OneWayToSource}"/>

    </Grid>
</Window>
